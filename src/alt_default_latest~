
#include <Eigen/Core>
#include <Eigen/Geometry>
#include <Eigen/Dense>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

#include <ros/ros.h>

#include <pcl/point_cloud.h>
#include <pcl/io/pcd_io.h>

#include <iostream>
#include <opencv2/core/eigen.hpp>
#include "opencv2/core/core.hpp"
#include "opencv2/calib3d/calib3d.hpp"
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include "opencv2/contrib/contrib.hpp"
#include <stdio.h>

#include <cv.h>
#include <highgui.h>
#include <iostream>
#include <string>
#include <pcl/common/common_headers.h>
#include <pcl/io/pcd_io.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <boost/thread/thread.hpp>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/registration/icp.h>
#include <iostream>
#include <boost/thread/thread.hpp>
#include <pcl/io/pcd_io.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/console/parse.h>
#include <pcl/common/transforms.h>
#include <pcl/octree/octree.h>
#include <pcl/octree/octree_impl.h>
#include <pcl/filters/filter.h>
#include <pcl/filters/passthrough.h>
#include <pcl/registration/icp.h>
#include <pcl/registration/registration.h>
#include <pcl/registration/correspondence_rejection_sample_consensus.h>
using namespace cv;
using namespace std;

/**
 * Load data for this assignment.
 * @param fname The JSON input filename.
 * @param left_fnames The output left images of the stereo pair.
 * @param right_fnames The output right images of the stereo pair.
 * @param poses The 6D poses of the camera when the images were taken.
 *
 * This will probably throw an exception if there's something wrong
 * with the json file.
 */
 
 //This function creates a PCL visualizer, sets the point cloud to view and returns a pointer
//This function creates a PCL visualizer, sets the point cloud to view and returns a pointer


void LoadMetadata(const std::string& fname,
                  std::vector<std::string>& left_fnames,
                  std::vector<std::string>& right_fnames,
                  std::vector<Eigen::Affine3d>& poses,
		  std::vector<Eigen::Quaterniond>& rots,
		  std::vector<Eigen::Vector3d>& trans) {
  namespace bpt = boost::property_tree;
  bpt::ptree pt;
  bpt::read_json(fname, pt);
  for (bpt::ptree::iterator itr=pt.begin();
       itr != pt.end(); ++itr) {
    bpt::ptree::value_type v(*itr);
    bpt::ptree entry(v.second); 
    std::string left_fname( entry.get<std::string>("left") );
    std::string right_fname( entry.get<std::string>("right") );
    left_fnames.push_back(left_fname);
    right_fnames.push_back(right_fname);
    Eigen::Vector3d t(entry.get<double>("pose.translation.x"),
                      entry.get<double>("pose.translation.y"),
                      entry.get<double>("pose.translation.z"));
    Eigen::Quaterniond q(entry.get<double>("pose.rotation.w"),
                         entry.get<double>("pose.rotation.x"),
                         entry.get<double>("pose.rotation.y"),
                         entry.get<double>("pose.rotation.z"));
    Eigen::Affine3d aff = Eigen::Translation3d(t) * q;
    poses.push_back(aff);
    rots.push_back(q);
    trans.push_back(t);
  }
}

/**
 * Load calibration data.
 * Note this is basically the ROS CameraInfo message.
 * See
 * http://docs.opencv.org/modules/calib3d/doc/camera_calibration_and_3d_reconstruction.html
 * http://wiki.ros.org/image_pipeline/CameraInfo
 * for reference.
 *
 * Note: you probably don't need all the parameters ;)
 */
void LoadCalibration(const std::string& fname,
                     int &width,
                     int &height,
                     cv::Mat& D,
                     cv::Mat& K,
                     cv::Mat& R,
                     cv::Mat& P) {
  namespace bpt = boost::property_tree;
  bpt::ptree pt;
  bpt::read_json(fname, pt);
  width = pt.get<int>("width");
  height = pt.get<int>("height");
  {
    bpt::ptree &spt(pt.get_child("D"));
    D.create(5, 1, CV_32FC1);
    int i=0;
    for (bpt::ptree::iterator itr=spt.begin(); itr != spt.end(); ++itr, ++i) {
      D.at<float>(i,0) = itr->second.get<float>("");
    }
  }
  {
    bpt::ptree &spt(pt.get_child("K"));
    K.create(3, 3, CV_32FC1);
    int ix=0;
    for (bpt::ptree::iterator itr=spt.begin(); itr != spt.end(); ++itr, ++ix) {
      int i=ix/3, j=ix%3;
      K.at<float>(i,j) = itr->second.get<float>("");
    }
  }
  {
    bpt::ptree &spt(pt.get_child("R"));
    R.create(3, 3, CV_32FC1);
    int ix=0;
    for (bpt::ptree::iterator itr=spt.begin(); itr != spt.end(); ++itr, ++ix) {
      int i=ix/3, j=ix%3;
      R.at<float>(i,j) = itr->second.get<float>("");
    }
  }
  {
    bpt::ptree &spt(pt.get_child("P"));
    P.create(3, 4, CV_32FC1);
    int ix=0;
    for (bpt::ptree::iterator itr=spt.begin(); itr != spt.end(); ++itr, ++ix) {
      int i=ix/4, j=ix%4;
      P.at<float>(i,j) = itr->second.get<float>("");
    }
  }
}

void ComputeDisparity(const cv::Mat& left, const cv::Mat& right, cv::Mat& disp)
 {

	Mat dispar, g1, g2;
	cvtColor(left, g1,CV_BGR2GRAY);
	cvtColor(right, g2, CV_BGR2GRAY);

	StereoSGBM sbm;
  sbm.SADWindowSize = 3;
  sbm.numberOfDisparities = 144;
  sbm.preFilterCap = 63;
  sbm.minDisparity = -39;
  sbm.uniquenessRatio = 10;
  sbm.speckleWindowSize = 100;
  sbm.speckleRange = 32;
  sbm.disp12MaxDiff = 1;
  sbm.fullDP = false;
  sbm.P1 = 216;
  sbm.P2 = 864;
  sbm(g1, g2, disp);
  sbm(g1, g2, dispar);
  normalize(dispar, disp, 0, 255, CV_MINMAX, CV_8U);
  imshow("left",left);
  imshow("right", right);
  imshow("disparity", disp); 
  std::cout<<"Press any key ...."<<std::endl;
  waitKey(0);
  

}

int main(int argc, char *argv[]) {

  if (argc < 4) {
    std::cerr << "Usage: " << argv[0] << " JSON_DATA_FILE JSON_LEFT_CALIB_FILE JSON_RIGHT_CALIB_FILE\n";
    return -1;
  }

  // load metadata 
  std::vector<std::string> left_fnames, right_fnames;
  std::vector<Eigen::Affine3d> poses;
  std::vector<Eigen::Vector3d> trans;
  std::vector<Eigen::Quaterniond> rots;
  LoadMetadata(argv[1], left_fnames, right_fnames, poses, rots, trans);


  // load calibration info.
  // note: you should load right as well
  int left_w, left_h;
  cv::Mat left_D, left_K, left_R, left_P;
  LoadCalibration(argv[2], left_w, left_h, left_D, left_K, left_R, left_P);
   
  int right_w, right_h;
  cv::Mat right_D, right_K, right_R, right_P;
  LoadCalibration(argv[3], right_w, right_h, right_D, right_K, right_R, right_P);
  
  


  // here you should load the images from their filenames
  // NOTE: make sure you run the program from the data/ directory
  // for the paths to work.
  // alternatively feel free to modify the input json file or the image
  // filenames at runtime so the images are found.

  // load one of the images as an example.
  std::cout << "loading " << left_fnames[0] << " ... ";
  cv::Mat left = cv::imread(left_fnames[0]);
  if (left.empty()) {
    std::cerr << "image not found.\n";
    return -1;
  } else {
    std::cout << "loaded image file with size " << left.cols << "x" << left.rows << "\n";
  }


  cv::Mat right = cv::imread(right_fnames[0]);
 
  double left_fovx;
  double left_fovy;
  double left_focalLength;
  cv::Point2d left_principalPoint;
  double left_aspectRatio;
  
  calibrationMatrixValues(left_K, left.size(), left_w, left_h, left_fovx, left_fovy, left_focalLength, left_principalPoint, left_aspectRatio);
  std::cout<<left_focalLength<<std::endl;
  std::cout<<left_fovy<<std::endl;
  std::cout<<left_principalPoint<<std::endl;
  /*
  double& right_fovx, right_fovy, right_focalLength, right_principalPoint, right_aspectRatio;
  
  calibrationMatrixValues(right_K, right.size(), right_w, right_h, right_fovx, right_fovy, right_focalLength, right_principalPoint, right_aspectRatio)
*/
  
  Mat R1, R2, Q;
  Eigen::Quaterniond q = rots[1];
  Eigen::Vector3d t = trans[1];
  Eigen::Affine3d aff = poses[1];
  Eigen::Matrix4d transform_mat = aff.matrix();
  std::cout<<"test"<<std::endl;
  std::cout<<transform_mat<<std::endl;
  std::cout<<"test"<<std::endl;
  std::cout << q.matrix() << std::endl;
  std::cout << t << std::endl;
  
  
  // Converting Eigen type to Opencv type inputArray ---> Mat
  
  Eigen::Matrix3d mR = q.matrix();
  cv::Mat mr2 = cv::Mat::eye(3,3, CV_64F);
  eigen2cv(mR, mr2);
  cv::Mat T = cv::Mat::zeros(3,1,CV_64F);
  
  T.at<double>(0,0) =   t(0,0);
  T.at<double>(0,1) =   t(1,0);
  T.at<double>(0,2) =   t(2,0);


  Rect roi1, roi2;
  //Computes rectification transforms for each head of a calibrated stereo camera.
  //with this I get the Q matrix for reprojectImageTo3D()

  stereoRectify(left_K,left_D,right_K,right_D,left.size(),mr2,T,R1,R2,left_P,right_P,Q, CALIB_ZERO_DISPARITY, -1, left.size(), &roi1, &roi2);
  
  
   Mat img1r, img2r;
   Mat map11, map12, map21, map22;
   
  // initUndistortRectifyMap(left_K, left_D, R1, left_P, left.size(), CV_16SC2, map11, map12);
   //initUndistortRectifyMap(right_K, right_D, R2, left_P, right.size(), CV_16SC2, map21, map22);
   
   //remap(left, img1r, map11, map12, INTER_LINEAR);
   //remap(right, img2r, map21, map22, INTER_LINEAR);

   //left = img1r;
   //right = img2r;
   
  cv::Mat disp;
  ComputeDisparity(left, right, disp);

  Mat recons3D(disp.size(), CV_32FC3);
  
  bool handleMissingValues=true; 
  reprojectImageTo3D( disp, recons3D, Q, handleMissingValues, CV_32F);
   
  std::cout<<Q<<std::endl;

  imshow("ShowRecons3D",recons3D);
  
  std::cout<<"Now  press escape key" << std::endl;
  waitKey(0);
  // finally compute the output point cloud from one or more stereo pairs.
  //
  // This is just a silly example of creating a colorized XYZ RGB point cloud.
  // open it with pcl_viewer. then press 'r' and '5' to see the rgb.



  
  
  
  
  		
  std::cout << "Creating Point Cloud ..." <<std::endl;
  std::cout << disp.size() <<std::endl;
  std::cout << left.size()<<std::endl;
  
  
  /* martin's way
  pcl::PointCloud<pcl::PointXYZRGB> pc;
  for (int i=0; i < recons3D.rows; ++i) 
  {
    for (int j=0; j < recons3D.cols; ++j)
     {
      pcl::PointXYZRGB p;
      cv::Vec3f xyz(recons3D.at<cv::Vec3b>(i,j));
      p.x = xyz[0];
      p.y = xyz[1];
      p.z = xyz[2];
      cv::Vec3b bgr(left.at<cv::Vec3b>(i, j));
      p.b = bgr[1];
      p.g = bgr[2];
      p.r = bgr[2]; 
      pc.push_back( p );
    }
  }

*/
  /*

  //pcl::PointCloud<pcl::PointXYZRGB> pc;
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr point_cloud_ptr (new pcl::PointCloud<pcl::PointXYZRGB>);
    uchar pr, pg, pb;
  for (int i=0; i < recons3D.rows;i++) 
  {
    for (int j=0; j < recons3D.cols;j++) 
    {
      //Point3f pointOcv = recons3D.at<Point3f>(i, j);
      Point3f pointOcv = recons3D.at<Point3f>(j, i); 

      pcl::PointXYZRGB p;
      
      p.x = -pointOcv.x; 
      p.y = - pointOcv.z;
      p.z = pointOcv.y;
      
      //cv::Vec3b bgr(recons3D.at<cv::Vec3b>(i, j));
      uchar* rgb_ptr = recons3D.ptr<uchar>(i);
      pb = rgb_ptr[3*j];
      pg = rgb_ptr[3*j+1];
      pr = rgb_ptr[3*j+2];
      uint32_t rgb = (static_cast<uint32_t>(pr) << 16 | static_cast<uint32_t>(pg) << 8 | static_cast<uint32_t>(pb));
      p.rgb = *reinterpret_cast<float*>(&rgb);
      //pc.push_back( p );
      point_cloud_ptr->points.push_back (p);
    }
  }
point_cloud_ptr->width = (int) point_cloud_ptr->points.size();
point_cloud_ptr->height = 1;

*/


/*
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_xyzrgb (new pcl::PointCloud<pcl::PointXYZRGB>); 
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_xyz (new pcl::PointCloud<pcl::PointXYZ>); 

    int add_points = 0; 
    for (int rows = 0; rows < recons3D.rows; ++rows) { 
        for (int cols = 0; cols < recons3D.cols; ++cols) { 
           float d = disp.at<float>(rows,cols); 
            cv::Point3f point = recons3D.at<cv::Point3f>(rows, cols); 
  
            // image_left is the stereo rectified image used in stere reconstruction 
           cv::Vec3b intensity = left.at<cv::Vec3b>(rows,cols); //BGR 

            pcl::PointXYZ pcl_point(point.x, point.y, point.z); 
            pcl::PointXYZRGB pcl_point_rgb(intensity[2], intensity[1], intensity[0]); 
            pcl_point_rgb.x = point.x; 
            pcl_point_rgb.y = point.y; 
            pcl_point_rgb.z = point.z; 


            cloud_xyz->push_back(pcl_point); 
            cloud_xyzrgb->push_back(pcl_point_rgb); 
        } 
    } 
*/



/*
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr point_cloud_ptr (new pcl::PointCloud<pcl::PointXYZRGB>);
	double px, py, pz;
  uchar pr, pg, pb;
  
  for (int i = 0; i < left.rows; i++)
  {
    uchar* rgb_ptr = left.ptr<uchar>(i);
//#ifdef CUSTOM_REPROJECT
    uchar* disp_ptr = disp.ptr<uchar>(i);
//#else
   // double* recons_ptr = recons3D.ptr<double>(i);
//#endif
    for (int j = 0; j < left.cols; j++)
    {
      //Get 3D coordinates
//#ifdef CUSTOM_REPROJECT
      uchar d = disp_ptr[j];
      if ( d == 0 ) continue; //Discard bad pixels
      double pw = -1.0 * static_cast<double>(d) * Q.at<double>(3,2) + Q.at<double>(3,3); 
      px = static_cast<double>(j) + Q.at<double>(0,3);
      py = static_cast<double>(i) + Q.at<double>(1,3);
      pz = Q.at<double>(2,3);
      
      px = px/pw;
      py = py/pw;
      pz = pz/pw;
/*
//#else
      px = recons_ptr[3*j];
      py = recons_ptr[3*j+1];
      pz = recons_ptr[3*j+2];
//#endif
    */  
      
    /*
      //Get RGB info
     pb = rgb_ptr[3*j];
      pg = rgb_ptr[3*j+1];
      pr = rgb_ptr[3*j+2];
      
      //Insert info into point cloud structure
      pcl::PointXYZRGB point;
      point.x = px;
      point.y = py;
      point.z = pz;
      uint32_t rgb = (static_cast<uint32_t>(pr) << 16 |
              static_cast<uint32_t>(pg) << 8 | static_cast<uint32_t>(pb));
      point.rgb = *reinterpret_cast<float*>(&rgb);
      point_cloud_ptr->points.push_back (point);
    }
  }
  point_cloud_ptr->width = (int) point_cloud_ptr->points.size();
  point_cloud_ptr->height = 1;
*/
  // std::cout << "saving a pointcloud to alt_pair02.pcd\n";
  //pcl::io::savePCDFileASCII("out.pcd", pc);
  //pcl::PCDWriter w;
  //w.writeBinaryCompressed("martin.pcd", pc);
  

  //pcl::PointCloud<pcl::PointXYZ>::Ptr  cloud0 (new pcl::PointCloud<pcl::PointXYZ>);
  //pcl::PointCloud<pcl::PointXYZ>::Ptr  cloud1 (new pcl::PointCloud<pcl::PointXYZ>);
  //pcl::PointCloud<pcl::PointXYZRGB>  cloud2;
  //pcl::PointCloud<pcl::PointXYZRGB>  cloud3;
  //pcl::PointCloud<pcl::PointXYZRGB>  cloud3;
  //pcl::PointCloud<pcl::PointXYZRGB>  aligned;
  //pcl::PCDReader reader0;
  //pcl::PCDReader reader1;
  //pcl::PCDReader reader2;
  //pcl::PCDReader reader3;
  //pcl::PCDReader reader4;
  //reader0.read ("aligned.pcd", cloud0);
  //std::cout << "aligned1\n";  
  //reader1.read ("aligned1.pcd", cloud1);
  //reader2.read ("pair02.pcd", cloud2);
  //reader3.read ("pair03.pcd", cloud3);
  //reader4.read ("pair04.pcd", cloud4);
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr source (new pcl::PointCloud<pcl::PointXYZRGB>);
  pcl::io::loadPCDFile("icp_cloud2.pcd", *source);
  
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr target (new pcl::PointCloud<pcl::PointXYZRGB>);
  pcl::io::loadPCDFile("aligned4.pcd", *target);
  
	pcl::IterativeClosestPoint<pcl::PointXYZRGB, pcl::PointXYZRGB> icp;
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr out(new pcl::PointCloud<pcl::PointXYZRGB>);
  
  icp.setInputSource(source);
  icp.setInputTarget(target); 
     
  
  icp.align(*out);
 

  std::cout<<icp.getFitnessScore() << std::endl;


/*
  pcl::transformPointCloud (cloud1, aligned, transform_mat);
	pcl::PCDWriter f;
	f.writeBinaryCompressed("aligned1.pcd", aligned);

  pcl::IterativeClosestPoint<pcl::PointXYZ, pcl::PointXYZ> icp;

  icp.setInputCloud(cloud0);
  icp.setInputTarget(cloud1);
  pcl::PointCloud<pcl::PointXYZ> icpcloud0;
  icp.align(icpcloud0);
  std::cout << "has converged:" << icp.hasConverged() << " score: " <<
  icp.getFitnessScore() << std::endl;
  std::cout << icp.getFinalTransformation() << std::endl;
  
   //pcl::PCDWriter hw;
   //hw.writeBinaryCompressed("icp0.pcd", *icpcloud0);
  //pcl::io::savePCDBinaryCompressed("out.pcd", pc);
  
  //added martin peris recommendation
  */
  
  /*
  std::cout << "saving a pointcloud to out.pcd\n";
  //pcl::io::savePCDFileASCII("out.pcd", pc);
  pcl::PCDWriter w;
  w.writeBinaryCompressed("out.pcd", *cloud_xyz);
  pcl::PCDWriter aw;
  aw.writeBinaryCompressed("out1.pcd", *cloud_xyzrgb);
  //pcl::io::savePCDBinaryCompressed("out.pcd", pc);
*/
  pcl::PCDWriter aw;
  aw.writeBinaryCompressed("icp_cloud3.pcd", *out);


  return 0;
}
