
/*
  //pcl::PointCloud<pcl::PointXYZRGB> pc;
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr point_cloud_ptr (new pcl::PointCloud<pcl::PointXYZRGB>);
    uchar pr, pg, pb;
  for (int i=0; i < recons3D.rows;i++) 
  {
    for (int j=0; j < recons3D.cols;j++) 
    {
      //Point3f pointOcv = recons3D.at<Point3f>(i, j);
      Point3f pointOcv = recons3D.at<Point3f>(i, j); 

      pcl::PointXYZRGB p;
      
      p.x = -pointOcv.x; 
      p.y = - pointOcv.z;
      p.z = pointOcv.y;
      
      //cv::Vec3b bgr(recons3D.at<cv::Vec3b>(i, j));
      uchar* rgb_ptr = recons3D.ptr<uchar>(i);
      pb = rgb_ptr[3*j];
      pg = rgb_ptr[3*j+1];
      pr = rgb_ptr[3*j+2];
      uint32_t rgb = (static_cast<uint32_t>(pr) << 16 | static_cast<uint32_t>(pg) << 8 | static_cast<uint32_t>(pb));
      p.rgb = *reinterpret_cast<float*>(&rgb);
      //pc.push_back( p );
      point_cloud_ptr->points.push_back (p);
    }
  }
point_cloud_ptr->width = (int) point_cloud_ptr->points.size();
point_cloud_ptr->height = 1;

/*

    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_xyzrgb (new pcl::PointCloud<pcl::PointXYZRGB>); 
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_xyz (new pcl::PointCloud<pcl::PointXYZ>); 

    int add_points = 0; 
    for (int rows = 0; rows < recons3D.rows; ++rows) { 
        for (int cols = 0; cols < recons3D.cols; ++cols) { 
           float d = disp.at<float>(rows,cols); 
            cv::Point3f point = recons3D.at<cv::Point3f>(rows, cols); 
  
            // image_left is the stereo rectified image used in stere reconstruction 
           cv::Vec3b intensity = left.at<cv::Vec3b>(rows,cols); //BGR 

            pcl::PointXYZ pcl_point(point.x, point.y, point.z); 
            pcl::PointXYZRGB pcl_point_rgb(intensity[2], intensity[1], intensity[0]); 
            pcl_point_rgb.x = point.x; 
            pcl_point_rgb.y = point.y; 
            pcl_point_rgb.z = point.z; 


            cloud_xyz->push_back(pcl_point); 
            cloud_xyzrgb->push_back(pcl_point_rgb); 
        } 
    } 
*/

/*
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr point_cloud_ptr (new pcl::PointCloud<pcl::PointXYZRGB>);
	double px, py, pz;
  uchar pr, pg, pb;
  
  for (int i = 0; i < left.rows; i++)
  {
    uchar* rgb_ptr = left.ptr<uchar>(i);
//#ifdef CUSTOM_REPROJECT
    uchar* disp_ptr = disp_c.ptr<uchar>(i);
//#else
   // double* recons_ptr = recons3D.ptr<double>(i);
//#endif
    for (int j = 0; j < left.cols; j++)
    {
      //Get 3D coordinates
//#ifdef CUSTOM_REPROJECT
      uchar d = disp_ptr[j];
      if ( d == 0 ) continue; //Discard bad pixels
      double pw = -1.0 * static_cast<double>(d) * Q.at<double>(3,2) + Q.at<double>(3,3); 
      px = static_cast<double>(j) + Q.at<double>(0,3);
      py = static_cast<double>(i) + Q.at<double>(1,3);
      pz = Q.at<double>(2,3);
      
      px = px/pw;
      py = py/pw;
      pz = pz/pw;
/*
//#else
      px = recons_ptr[3*j];
      py = recons_ptr[3*j+1];
      pz = recons_ptr[3*j+2];
//#endif
      */
      
    /*  
      //Get RGB info
     pb = rgb_ptr[3*j];
      pg = rgb_ptr[3*j+1];
      pr = rgb_ptr[3*j+2];
      
      //Insert info into point cloud structure
      pcl::PointXYZRGB point;
      point.x = px;
      point.y = py;
      point.z = pz;
      uint32_t rgb = (static_cast<uint32_t>(pr) << 16 |
              static_cast<uint32_t>(pg) << 8 | static_cast<uint32_t>(pb));
      point.rgb = *reinterpret_cast<float*>(&rgb);
      point_cloud_ptr->points.push_back (point);
    }
  }
  point_cloud_ptr->width = (int) point_cloud_ptr->points.size();
  point_cloud_ptr->height = 1;
*/
 /*
 
   std::cout << "saving a pointcloud to alt_temp_pair00.pcd\n";
  //pcl::io::savePCDFileASCII("out.pcd", pc);
  pcl::PCDWriter w;
  w.writeBinaryCompressed("alt_temp_pair00.pcd", *point_cloud_ptr);
  */
  
